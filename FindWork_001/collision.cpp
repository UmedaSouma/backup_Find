//===========================================================================================================================================================
// 
// 当たり判定クラス [collision.cpp]
// Author : souma umeda
// 
//===========================================================================================================================================================
#include "collision.h"
#include "modeldata.h"
#include "calculation.h"

//========================================================================================================================
// コンストラクタ
//========================================================================================================================
CCollision::CCollision()
{
}

//========================================================================================================================
// デストラクタ
//========================================================================================================================
CCollision::~CCollision()
{
}

//========================================================================================================================
// 初期設定
//========================================================================================================================
HRESULT CCollision::Init()
{
	return S_OK;
}

//========================================================================================================================
// 終了処理
//========================================================================================================================
void CCollision::Uninit()
{
}

//========================================================================================================================
// 更新処理
//========================================================================================================================
void CCollision::Update()
{
}

//========================================================================================================================
// 描画処理
//========================================================================================================================
void CCollision::Draw()
{
}

//===========================================================================================================
// 四角判定
//===========================================================================================================
bool CCollision::BoxTrigger(D3DXVECTOR3 posA, D3DXVECTOR3 sizeA, D3DXVECTOR3 posB, D3DXVECTOR3 sizeB)
{
	if (posA.x + sizeA.x >= posB.x - sizeB.x &&
		posA.x - sizeA.x <= posB.x + sizeB.x &&
		posA.y + sizeA.y >= posB.y - sizeB.y &&
		posA.y - sizeA.y <= posB.y + sizeB.y &&
		posA.z + sizeA.z >= posB.z - sizeB.z &&
		posA.z - sizeA.z <= posB.z + sizeB.z
		)
	{
		return true;
	}

	return false;
}

//===========================================================================================================
// 円判定
//===========================================================================================================
bool CCollision::CircleTrigger(D3DXVECTOR3 posA, float radiusA, D3DXVECTOR3 posB, float radiusB)
{
	bool b = false;

	float Distance = CCalculation::TwoPointDistance(posA, posB); 

	float Result = Distance - (radiusA + radiusB);

	if (Result <= 0) 
	{ b = true; }

	return b;
}

//===========================================================================================================
// 球判定
//===========================================================================================================
bool CCollision::SphereTrigger(D3DXVECTOR3 posA, float radiusA, D3DXVECTOR3 posB, float radiusB)
{
	bool b = false;

	float DisWidth = CCalculation::TwoPointDistance(posA, posB);
	float DisHeight = CCalculation::TwoPointDistanceHeight(posA, posB);

	float ResultW = DisWidth - (radiusA + radiusB);
	float ResultH = DisHeight - (radiusA + radiusB);

	if (ResultW <= 0
		&& ResultH <= 0
		)
	{
		b = true;
	}

	return b;
}

//===========================================================================================================
// メッシュ地面との当たり判定
//===========================================================================================================
std::tuple<BOOL, float> CCollision::MeshCollision(LPD3DXBASEMESH pMesh, D3DXVECTOR3 RayWay, D3DXVECTOR3 StartPos)
{
	// メッシュに必要な情報
	BOOL pHit = false;
	float Dis = 0.0f;
	DWORD dwHitIndex = -1;
	float fHitU;
	float fHitV;

	// レイとメッシュが当たったか判定する
	D3DXIntersect(
		pMesh,			// メッシュの情報
		&StartPos,		// レイの始点
		&RayWay,		// レイの方向
		&pHit,			// 当たったかどうか
		&dwHitIndex,	// 当たったメッシュのインデックス
		&fHitU,			// 
		&fHitV,			// 
		&Dis,			// レイの始点とメッシュの距離
		NULL,			// 
		NULL);			// 

	return std::tuple<BOOL, float>(pHit, Dis);
}
