//===========================================================================================================================================================
// 
// 障害物の処理 [obstacles.cpp]
// Author : souma umeda
// 
//===========================================================================================================================================================
#include "obstacles.h"
#include "calculation.h"
#include "scene.h"
#include "car_player.h"

//========================================================================================================================
// コンストラクタ
//========================================================================================================================
CObstacle::CObstacle():
	m_Weight(0.0f)
{
}

//========================================================================================================================
// デストラクタ
//========================================================================================================================
CObstacle::~CObstacle()
{
}

//========================================================================================================================
// 初期設定
//========================================================================================================================
HRESULT CObstacle::Init()
{

	//SetGravity(false);
	//SetPos({ 50.0f,10.0f,100.0f });
	SetSize({ 10.0f,10.0f,10.0f });
	SetType(OBSTACLE);

	// タイプごとの初期設定
	InitSet();

	CModel::Init();
	return S_OK;
}

//========================================================================================================================
// 終了処理
//========================================================================================================================
void CObstacle::Uninit()
{
	CModel::Uninit();
}

//========================================================================================================================
// 更新処理
//========================================================================================================================
void CObstacle::Update()
{
	D3DXVECTOR3 pos = GetPos();
	D3DXVECTOR3 move = GetMove();

	move.x += -1 * (move.x * 0.05f);
	move.z += -1 * (move.z * 0.05f);

	if (CScene::GetMode() == CScene::MODE_GAME)
	{
		move.y -= 0.1f;
	}

	SetMove(move);
	pos += move;

	SetPos(pos);

	MeshColl();

	CModel::Update();
}

//========================================================================================================================
// 描画処理
//========================================================================================================================
void CObstacle::Draw()
{
	//MeshColl();

	D3DXVECTOR3 pos = GetPos();

	CModel::Draw();
}

//===========================================================================================================
// タイプごとの初期設定
//===========================================================================================================
void CObstacle::InitSet()
{
	switch (m_obstype)
	{
	case OBS_DRUMCAN:
		SetModel("data\\MODEL\\drumcan_000.x");
		m_Weight = 0.0f;

		break;
	}
}

//===========================================================================================================
// 当たった時の挙動
//===========================================================================================================
void CObstacle::HitMovement(CCar*pcar)
{
	float Angle = CCalculation::DemandAngle(pcar->GetPos(), GetPos());

	D3DXVECTOR3 move = GetMove();
	float Speed = pcar->GetAccumulationSpeed();

	if (m_Weight > Speed) 
	{
		pcar->SetMove({ 0.0f,0.0f,0.0f });

		return; 
	}

	// スピードの分飛ばす
	SetMove({
		(sinf(D3DX_PI - Angle) * -Speed) + move.x,
		(Speed * 0.15f) + move.y ,
		(cosf(D3DX_PI - Angle) * Speed) + move.z
		});

	if (pcar->GetType() == CObject::CAR_PLAYER)
	{// 当たった車がプレイヤーだったら

		// 車のオブジェクトをダウンキャスト
		CCarPlayer* pcarP = nullptr;
		pcarP = dynamic_cast<CCarPlayer*>(pcar);

		// プレイヤーのゲージを回復する
		pcarP->SetRecoveryGauge(1000);
	}

	//pcar->ActionTurbo();
}

//========================================================================================================================
// 生成処理
//========================================================================================================================
CObstacle* CObstacle::Create(D3DXVECTOR3 pos, OBS_TYPE type)
{
	CObstacle* pObstacle = new CObstacle;
	pObstacle->SetPos(pos);
	pObstacle->m_obstype = type;
	pObstacle->Init();

	return pObstacle;
}
